/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const PotlucksLazyImport = createFileRoute('/potlucks')()
const PeopleLazyImport = createFileRoute('/people')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const PotlucksLazyRoute = PotlucksLazyImport.update({
  path: '/potlucks',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/potlucks.lazy').then((d) => d.Route))

const PeopleLazyRoute = PeopleLazyImport.update({
  path: '/people',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/people.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/people': {
      id: '/people'
      path: '/people'
      fullPath: '/people'
      preLoaderRoute: typeof PeopleLazyImport
      parentRoute: typeof rootRoute
    }
    '/potlucks': {
      id: '/potlucks'
      path: '/potlucks'
      fullPath: '/potlucks'
      preLoaderRoute: typeof PotlucksLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/people': typeof PeopleLazyRoute
  '/potlucks': typeof PotlucksLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/people': typeof PeopleLazyRoute
  '/potlucks': typeof PotlucksLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/people': typeof PeopleLazyRoute
  '/potlucks': typeof PotlucksLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/people' | '/potlucks'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/people' | '/potlucks'
  id: '__root__' | '/' | '/people' | '/potlucks'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  PeopleLazyRoute: typeof PeopleLazyRoute
  PotlucksLazyRoute: typeof PotlucksLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  PeopleLazyRoute: PeopleLazyRoute,
  PotlucksLazyRoute: PotlucksLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/people",
        "/potlucks"
      ]
    },
    "/": {
      "filePath": "index.lazy.jsx"
    },
    "/people": {
      "filePath": "people.lazy.jsx"
    },
    "/potlucks": {
      "filePath": "potlucks.lazy.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
